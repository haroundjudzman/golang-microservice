// Code generated by go-swagger; DO NOT EDIT.

package burgers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haroundjudzman/golang-microservice/sdk/models"
)

// EditBurgerReader is a Reader for the EditBurger structure.
type EditBurgerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditBurgerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewEditBurgerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEditBurgerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEditBurgerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewEditBurgerUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEditBurgerNoContent creates a EditBurgerNoContent with default headers values
func NewEditBurgerNoContent() *EditBurgerNoContent {
	return &EditBurgerNoContent{}
}

/* EditBurgerNoContent describes a response with status code 204, with default header values.

No content is returned
*/
type EditBurgerNoContent struct {
}

func (o *EditBurgerNoContent) Error() string {
	return fmt.Sprintf("[PUT /burgers][%d] editBurgerNoContent ", 204)
}

func (o *EditBurgerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditBurgerBadRequest creates a EditBurgerBadRequest with default headers values
func NewEditBurgerBadRequest() *EditBurgerBadRequest {
	return &EditBurgerBadRequest{}
}

/* EditBurgerBadRequest describes a response with status code 400, with default header values.

Bad request path
*/
type EditBurgerBadRequest struct {
}

func (o *EditBurgerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /burgers][%d] editBurgerBadRequest ", 400)
}

func (o *EditBurgerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditBurgerNotFound creates a EditBurgerNotFound with default headers values
func NewEditBurgerNotFound() *EditBurgerNotFound {
	return &EditBurgerNotFound{}
}

/* EditBurgerNotFound describes a response with status code 404, with default header values.

No matching burger is found
*/
type EditBurgerNotFound struct {
}

func (o *EditBurgerNotFound) Error() string {
	return fmt.Sprintf("[PUT /burgers][%d] editBurgerNotFound ", 404)
}

func (o *EditBurgerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEditBurgerUnprocessableEntity creates a EditBurgerUnprocessableEntity with default headers values
func NewEditBurgerUnprocessableEntity() *EditBurgerUnprocessableEntity {
	return &EditBurgerUnprocessableEntity{}
}

/* EditBurgerUnprocessableEntity describes a response with status code 422, with default header values.

Validation errors
*/
type EditBurgerUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *EditBurgerUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /burgers][%d] editBurgerUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *EditBurgerUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *EditBurgerUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
