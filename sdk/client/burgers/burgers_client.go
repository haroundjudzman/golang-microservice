// Code generated by go-swagger; DO NOT EDIT.

package burgers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new burgers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for burgers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBurger(params *CreateBurgerParams, opts ...ClientOption) (*CreateBurgerOK, error)

	DeleteBurger(params *DeleteBurgerParams, opts ...ClientOption) (*DeleteBurgerNoContent, error)

	EditBurger(params *EditBurgerParams, opts ...ClientOption) (*EditBurgerNoContent, error)

	ListBurger(params *ListBurgerParams, opts ...ClientOption) (*ListBurgerOK, error)

	ListBurgers(params *ListBurgersParams, opts ...ClientOption) (*ListBurgersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateBurger Create a new burger and insert to database
*/
func (a *Client) CreateBurger(params *CreateBurgerParams, opts ...ClientOption) (*CreateBurgerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBurgerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBurger",
		Method:             "POST",
		PathPattern:        "/burgers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBurgerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBurgerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBurger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBurger Delete a burger from database
*/
func (a *Client) DeleteBurger(params *DeleteBurgerParams, opts ...ClientOption) (*DeleteBurgerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBurgerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBurger",
		Method:             "DELETE",
		PathPattern:        "/product/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBurgerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBurgerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBurger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EditBurger Edit existing burger
*/
func (a *Client) EditBurger(params *EditBurgerParams, opts ...ClientOption) (*EditBurgerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditBurgerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editBurger",
		Method:             "PUT",
		PathPattern:        "/burgers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditBurgerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditBurgerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editBurger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBurger Returns a burger in database from given id
*/
func (a *Client) ListBurger(params *ListBurgerParams, opts ...ClientOption) (*ListBurgerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBurgerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBurger",
		Method:             "GET",
		PathPattern:        "/burgers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBurgerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBurgerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBurger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBurgers Returns a list of all burgers in database
*/
func (a *Client) ListBurgers(params *ListBurgersParams, opts ...ClientOption) (*ListBurgersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBurgersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBurgers",
		Method:             "GET",
		PathPattern:        "/burgers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBurgersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBurgersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBurgers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
